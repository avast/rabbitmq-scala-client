buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.5'
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.17.13'
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version '2.0.0'
}

nexusPublishing {
    repositories {
        sonatype()
    }

    transitionCheckOptions {
        maxRetries.set(180) // 30 minutes
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'com.avast.clients.rabbitmq'
    version = version == 'unspecified' ? 'DEVELOPER-SNAPSHOT' : version
    ext {
        bytesVersion = "2.2.0"
        circeVersion = "0.14.1"
        catsVersion = "2.7.0"
        catsEffectVersion = "2.5.4"
        fs2Version = "2.5.3"
        metricsVersion = "3.0.4"
        protobufVersion = "3.25.8"
        pureconfigVersion = "0.17.9"
        scalapbVersion = "0.11.18"
        scalapbJson4sVersion = "0.11.1"
        typesafeConfigVersion = "1.4.5"
        monixVersion = "3.4.1" // just for tests!
    }
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'java-library'

    if (!project.hasProperty("notPublished")) {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
    }

    group = "com.avast.clients.rabbitmq"

    java {
        withJavadocJar()
        withSourcesJar()
    }

    if (!project.hasProperty("notPublished")) {
        afterEvaluate {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        from(components.java)
                        artifactId = tasks.jar.archiveBaseName.get()
                        pom {
                            name = 'RabbitMQ client for Scala'
                            description = 'Scala wrapper over standard RabbitMQ Java client library'
                            url = 'https://github.com/avast/rabbitmq-scala-client'
                            licenses {
                                license {
                                    name = 'The MIT License'
                                    url = 'http://www.opensource.org/licenses/mit-license.php'
                                }
                            }
                            developers {
                                developer {
                                    id = 'jendakol'
                                    name = 'Jenda Kolena'
                                    email = 'jan.kolena@avast.com'
                                }
                            }
                            scm {
                                connection = 'scm:git:git://github.com/avast/rabbitmq-scala-client.git'
                                developerConnection = 'scm:git:ssh://github.com/avast/rabbitmq-scala-client.git'
                                url = 'https://github.com/avast/rabbitmq-scala-client'
                            }
                        }
                    }
                }
            }
        }

        signing {
            String base64Key = System.getenv('SIGNING_KEY')
            if (base64Key) {
                useInMemoryPgpKeys(new String(Base64.decoder.decode(base64Key)), System.getenv('SIGNING_PASSWORD'))
                sign publishing.publications
            }
        }
    }

    configurations {
        scalaCompilerPlugin
    }

    compileScala {
        scalaCompileOptions.additionalParameters = ['-target:jvm-1.8']
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        scalaCompilerPlugin "org.typelevel:kind-projector_$scalaLibraryVersion:0.13.4"

        api "org.scala-lang.modules:scala-collection-compat_$scalaVersion:2.6.0"

        testImplementation "io.monix:monix_$scalaVersion:$monixVersion"

        testImplementation "com.avast.metrics:metrics-jmx:$metricsVersion"

        testImplementation "org.scalaj:scalaj-http_$scalaVersion:2.4.2"
        testImplementation "io.circe:circe-core_$scalaVersion:$circeVersion"
        testImplementation "io.circe:circe-generic_$scalaVersion:$circeVersion"
        testImplementation "io.circe:circe-parser_$scalaVersion:$circeVersion"

        testImplementation 'junit:junit:4.13.2'
        testImplementation "org.scalatest:scalatest_$scalaVersion:3.3.0-SNAP4"
        testImplementation "org.scalatestplus:junit-4-12_$scalaVersion:3.1.3.0"
        testImplementation "org.scalatestplus:mockito-5-18_$scalaVersion:3.2.19.0"
        testImplementation "com.typesafe.scala-logging:scala-logging_$scalaVersion:3.9.6"
        testImplementation 'ch.qos.logback:logback-classic:1.5.19'

        testImplementation 'org.pegdown:pegdown:1.6.0'
    }

    tasks.withType(ScalaCompile) {
        List plugins = configurations.scalaCompilerPlugin.files.collect { "-Xplugin:${it.getAbsolutePath()}".toString() }
        if (scalaVersion.startsWith("2.12")) {
            logger.info("Using -Ypartial-unification for Scala $scalaVersion")
            plugins.add("-Ypartial-unification")
        }
        scalaCompileOptions.additionalParameters = plugins
    }

    test {
        testLogging {
            events 'failed'
            exceptionFormat 'full'
        }
    }
}


allprojects {
    //noinspection UnnecessaryQualifiedReference
    tasks.withType(org.gradle.api.tasks.scala.ScalaDoc) {
        enabled = false
    }
}
