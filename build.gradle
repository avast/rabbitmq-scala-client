buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.15'
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.14.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.36.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
    }
}

apply plugin: 'idea'
apply plugin: 'docker-compose'

group = "com.avast.clients.rabbitmq"
version = version == 'unspecified' ? 'DEVELOPER-SNAPSHOT' : version

allprojects {
    ext {
        def scalaVersionEnv = System.getenv("SCALA_VERSION")

        scalaVersionFull = scalaVersionEnv != null ? scalaVersionEnv : "2.12.13"
        scalaVersion = "${scalaVersionFull}".split("\\.").dropRight(1).join(".")

        metricsVersion = "2.8.5"
        bytesVersion = "2.2.0"
        circeVersion = "0.13.0"
        cactusVersion = "0.17.0"
        catsVersion = "2.4.2"
        catsEffectVersion = "2.3.3"
        fs2Version = "2.5.3"
        protobufVersion = "3.15.4"
        scalapbVersion = "0.10.11"
        scalapbJson4sVersion = "0.10.3"
        monixVersion = "3.0.0" // just for tests!
    }
}

println("Scala version: ${scalaVersion} (${scalaVersionFull})") // will display the version once, when configuring root

subprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier "sources"
    }

    group = "com.avast.clients.rabbitmq"

    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                groupId project.group
                version project.version
                artifact sourceJar
            }
        }
    }

    artifacts {
        archives jar
        archives sourceJar
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publish = true // auto publish
        configurations = ['archives']

        pkg {
            repo = 'maven'
            name = 'rabbitmq-scala-client'
            userOrg = 'avast'
            desc = 'Scala wrapper over standard RabbitMQ Java client library'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/avast/rabbitmq-scala-client.git'
            githubRepo = 'avast/rabbitmq-scala-client'
            websiteUrl = 'https://github.com/avast/rabbitmq-scala-client'
            issueTrackerUrl = 'https://github.com/avast/rabbitmq-scala-client/issues'
            labels = ['rabbitmq', 'client', 'amqp', 'scala']
            version {
                name = project.version
                vcsTag = project.version
            }
        }
    }

    configurations {
        scalaCompilerPlugin
    }

    compileScala {
        scalaCompileOptions.additionalParameters = ['-target:jvm-1.8']
    }

    test {
        testLogging {
            showStandardStreams = true
        }
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        scalaCompilerPlugin "org.typelevel:kind-projector_$scalaVersionFull:0.11.3"

        compile "org.scala-lang.modules:scala-collection-compat_$scalaVersion:2.4.2"

        testCompile "io.monix:monix_$scalaVersion:$monixVersion"

        testCompile "com.avast.metrics:metrics-jmx:${metricsVersion}"

        testCompile "org.scalaj:scalaj-http_$scalaVersion:2.4.2"
        testCompile "io.circe:circe-core_$scalaVersion:$circeVersion"
        testCompile "io.circe:circe-generic_$scalaVersion:$circeVersion"
        testCompile "io.circe:circe-parser_$scalaVersion:$circeVersion"

        testCompile 'junit:junit:4.13.2'
        testCompile "org.scalatest:scalatest_$scalaVersion:3.0.8"
        testCompile 'org.mockito:mockito-all:1.10.19'
        testCompile 'ch.qos.logback:logback-classic:1.2.3'

        testRuntime 'org.pegdown:pegdown:1.6.0'
    }

    tasks.withType(ScalaCompile) {
        List plugins = configurations.scalaCompilerPlugin.files.collect { "-Xplugin:${it.getAbsolutePath()}".toString() }
        if (scalaVersion.startsWith("2.12")) {
            logger.info("Using -Ypartial-unification for Scala ${scalaVersion}")
            plugins.add("-Ypartial-unification")
        }
        scalaCompileOptions.additionalParameters = plugins
    }

    test {
        testLogging {
            events 'failed'
            exceptionFormat 'full'
        }
    }
}


allprojects {
    //noinspection UnnecessaryQualifiedReference
    tasks.withType(org.gradle.api.tasks.scala.ScalaDoc) {
        enabled = false
    }
}
